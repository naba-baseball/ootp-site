import { mysqlTable, int, varchar, double, smallint, date, mysqlView, decimal, tinyint } from 'drizzle-orm/mysql-core'
import { relations, sql } from 'drizzle-orm'

export const cities = mysqlTable('cities', {
  cityId: int('city_id').notNull(),
  nationId: int('nation_id'),
  stateId: int('state_id'),
  name: varchar({ length: 80 }),
  abbreviation: varchar({ length: 10 }),
  latitude: double(),
  longitude: double(),
  population: int(),
  mainLanguageId: int('main_language_id'),
})

export const coaches = mysqlTable('coaches', {
  coachId: int('coach_id').notNull(),
  firstName: varchar('first_name', { length: 50 }),
  lastName: varchar('last_name', { length: 50 }),
  nickName: varchar('nick_name', { length: 50 }),
  age: smallint(),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  dateOfBirth: date('date_of_birth', { mode: 'string' }),
  cityOfBirthId: int('city_of_birth_id'),
  nationId: int('nation_id'),
  weight: smallint(),
  height: smallint(),
  position: smallint(),
  experience: smallint(),
  occupation: smallint(),
  teamId: int('team_id'),
  formerPlayerId: int('former_player_id'),
  quickLeft: smallint('quick_left'),
  contractSalary: int('contract_salary'),
  contractYears: smallint('contract_years'),
  contractExtensionSalary: int('contract_extension_salary'),
  contractExtensionYears: smallint('contract_extension_years'),
  scoutMajor: smallint('scout_major'),
  scoutMinor: smallint('scout_minor'),
  scoutInternational: smallint('scout_international'),
  scoutAmateur: smallint('scout_amateur'),
  scoutAmateurPreference: smallint('scout_amateur_preference'),
  teachHitting: smallint('teach_hitting'),
  teachPitching: smallint('teach_pitching'),
  teachC: smallint('teach_c'),
  teachIf: smallint('teach_if'),
  teachOf: smallint('teach_of'),
  handleVeterans: smallint('handle_veterans'),
  handleRookies: smallint('handle_rookies'),
  handlePlayers: smallint('handle_players'),
  healLegs: smallint('heal_legs'),
  healArms: smallint('heal_arms'),
  healBack: smallint('heal_back'),
  healOther: smallint('heal_other'),
  healRest: smallint('heal_rest'),
  managementStyle: smallint('management_style'),
  personality: smallint(),
  hittingFocus: smallint('hitting_focus'),
  pitchingFocus: smallint('pitching_focus'),
  trainingFocus: smallint('training_focus'),
  teachRunning: smallint('teach_running'),
  preventLegs: smallint('prevent_legs'),
  preventArms: smallint('prevent_arms'),
  preventBack: smallint('prevent_back'),
  preventOther: smallint('prevent_other'),
  stealing: int(),
  running: int(),
  pinchrun: int(),
  pinchhitPos: int('pinchhit_pos'),
  pinchhitPitch: int('pinchhit_pitch'),
  hookStart: int('hook_start'),
  hookRelief: int('hook_relief'),
  closer: int(),
  lrMatchup: int('lr_matchup'),
  buntHit: int('bunt_hit'),
  bunt: int(),
  hitRun: int('hit_run'),
  runHit: int('run_hit'),
  squeeze: int(),
  pitchAround: int('pitch_around'),
  intentionalWalk: int('intentional_walk'),
  holdRunner: int('hold_runner'),
  guardLines: int('guard_lines'),
  infieldIn: int('infield_in'),
  outfieldIn: int('outfield_in'),
  cornersIn: int('corners_in'),
  shiftIf: int('shift_if'),
  shiftOf: int('shift_of'),
  opener: int(),
  numPitchers: smallint('num_pitchers'),
  numHitters: smallint('num_hitters'),
  favorSpeedToPower: int('favor_speed_to_power'),
  favorAvgToObp: int('favor_avg_to_obp'),
  favorDefenseToOffense: int('favor_defense_to_offense'),
  favorPitchingToHitting: int('favor_pitching_to_hitting'),
  favorVeteransToProspects: int('favor_veterans_to_prospects'),
  tradeAggressiveness: int('trade_aggressiveness'),
  playerLoyalty: int('player_loyalty'),
  tradeFrequency: int('trade_frequency'),
  tradePreference: int('trade_preference'),
  valueStats: int('value_stats'),
  valueThisYear: int('value_this_year'),
  valueLastYear: int('value_last_year'),
  valueTwoYears: int('value_two_years'),
  draftValue: int('draft_value'),
  intlFaValue: int('intl_fa_value'),
  developValue: int('develop_value'),
  ratingsValue: int('ratings_value'),
  managerValue: smallint('manager_value'),
  pitchingCoachValue: smallint('pitching_coach_value'),
  hittingCoachValue: smallint('hitting_coach_value'),
  scoutValue: smallint('scout_value'),
  doctorValue: smallint('doctor_value'),
  basecoachValue: smallint('basecoach_value'),
  positiveRelation: smallint('positive_relation'),
  negativeRelation: smallint('negative_relation'),
})

export const continents = mysqlTable('continents', {
  continentId: int('continent_id').notNull(),
  name: varchar({ length: 50 }),
  abbreviation: varchar({ length: 50 }),
  demonym: varchar({ length: 50 }),
  population: int(),
  mainLanguageId: int('main_language_id'),
})

export const divisions = mysqlTable('divisions', {
  leagueId: int('league_id').notNull(),
  subLeagueId: int('sub_league_id').notNull(),
  divisionId: int('division_id').notNull(),
  name: varchar({ length: 50 }),
  gender: int(),
})

export const games = mysqlTable('games', {
  gameId: int('game_id').notNull(),
  leagueId: int('league_id'),
  homeTeam: int('home_team'),
  awayTeam: int('away_team'),
  attendance: int(),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  date: date({ mode: 'string' }),
  time: smallint(),
  gameType: smallint('game_type'),
  played: tinyint(),
  innings: smallint(),
  runs0: smallint(),
  runs1: smallint(),
  hits0: smallint(),
  hits1: smallint(),
  errors0: smallint(),
  errors1: smallint(),
  winningPitcher: int('winning_pitcher'),
  losingPitcher: int('losing_pitcher'),
  savePitcher: int('save_pitcher'),
  starter0: int(),
  starter1: int(),
})

export const gamesScore = mysqlTable('games_score', {
  gameId: int('game_id').notNull(),
  team: smallint().notNull(),
  inning: smallint().notNull(),
  score: smallint(),
})

export const gameLogs = mysqlTable('game_logs', {
  gameId: int('game_id'),
  type: smallint(),
  line: int(),
  text: varchar({ length: 255 }),
})

export const humanManagers = mysqlTable('human_managers', {
  humanManagerId: int('human_manager_id'),
  isCommish: tinyint('is_commish'),
  firstName: varchar('first_name', { length: 50 }),
  lastName: varchar('last_name', { length: 50 }),
  nickName: varchar('nick_name', { length: 50 }),
  age: smallint(),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  dateOfBirth: date('date_of_birth', { mode: 'string' }),
  cityOfBirthId: int('city_of_birth_id'),
  nationId: int('nation_id'),
  secondNationId: int('second_nation_id'),
  weight: smallint(),
  height: smallint(),
  retired: tinyint(),
  freeAgent: tinyint('free_agent'),
  leagueId: int('league_id'),
  lastLeagueId: int('last_league_id'),
  teamId: int('team_id'),
  lastTeamId: int('last_team_id'),
  organizationId: int('organization_id'),
  lastOrganizationId: int('last_organization_id'),
  languageIds0: int('language_ids0'),
  languageIds1: int('language_ids1'),
  uniformNumber: smallint('uniform_number'),
  experience: smallint(),
  personType: smallint('person_type'),
  bats: smallint(),
  throws: smallint(),
  personalityGreed: smallint('personality_greed'),
  personalityLoyalty: smallint('personality_loyalty'),
  personalityPlayForWinner: smallint('personality_play_for_winner'),
  personalityWorkEthic: smallint('personality_work_ethic'),
  personalityIntelligence: smallint('personality_intelligence'),
  personalityLeader: smallint('personality_leader'),
})

export const humanManagerHistory = mysqlTable('human_manager_history', {
  humanManagerId: int('human_manager_id'),
  teamId: int('team_id'),
  year: smallint(),
  leagueId: int('league_id'),
  subLeagueId: int('sub_league_id'),
  divisionId: int('division_id'),
  bestHitterId: int('best_hitter_id'),
  bestPitcherId: int('best_pitcher_id'),
  bestRookieId: int('best_rookie_id'),
  managerId: int('manager_id'),
  madePlayoffs: tinyint('made_playoffs'),
  wonPlayoffs: tinyint('won_playoffs'),
  fired: tinyint(),
  positionInDivision: smallint('position_in_division'),
})

export const humanManagerHistoryBattingStats = mysqlTable('human_manager_history_batting_stats', {
  humanManagerId: int('human_manager_id'),
  teamId: int('team_id'),
  year: smallint(),
  leagueId: int('league_id'),
  subLeagueId: int('sub_league_id'),
  divisionId: int('division_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  pa: int(),
  ab: int(),
  h: int(),
  k: int(),
  tb: int(),
  s: int(),
  d: int(),
  t: int(),
  hr: int(),
  sb: int(),
  cs: int(),
  rbi: int(),
  r: int(),
  bb: int(),
  ibb: int(),
  hp: int(),
  sh: int(),
  sf: int(),
  ci: int(),
  gdp: int(),
  g: int(),
  gs: int(),
  ebh: int(),
  pitchesSeen: int('pitches_seen'),
  avg: double(),
  obp: double(),
  slg: double(),
  rc: double(),
  rc27: double(),
  iso: double(),
  tavg: double(),
  woba: double(),
  ops: double(),
  sbp: double(),
})

export const humanManagerHistoryFieldingStatsStats = mysqlTable('human_manager_history_fielding_stats_stats', {
  humanManagerId: int('human_manager_id'),
  teamId: int('team_id'),
  year: smallint(),
  leagueId: int('league_id'),
  subLeagueId: int('sub_league_id'),
  divisionId: int('division_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  position: smallint(),
  g: int(),
  gs: int(),
  tc: int(),
  a: int(),
  po: int(),
  e: int(),
  dp: int(),
  tp: int(),
  pb: int(),
  sba: int(),
  rto: int(),
  er: int(),
  ip: int(),
  ipf: int(),
  pct: double(),
  range: double(),
  rtop: double(),
  cera: double(),
})

export const humanManagerHistoryFinancials = mysqlTable('human_manager_history_financials', {
  humanManagerId: int('human_manager_id'),
  teamId: int('team_id'),
  year: smallint(),
  leagueId: int('league_id'),
  subLeagueId: int('sub_league_id'),
  divisionId: int('division_id'),
  gateRevenue: int('gate_revenue'),
  mediaRevenue: int('media_revenue'),
  merchandisingRevenue: int('merchandising_revenue'),
  otherRevenue: int('other_revenue'),
  revenueSharing: int('revenue_sharing'),
  luxurySharing: int('luxury_sharing'),
  playoffRevenue: int('playoff_revenue'),
  cash: int(),
  playerExpenses: int('player_expenses'),
  staffExpenses: int('staff_expenses'),
  stadiumExpenses: int('stadium_expenses'),
  attendance: int(),
  fanInterest: smallint('fan_interest'),
  fanLoyalty: smallint('fan_loyalty'),
  fanModifier: smallint('fan_modifier'),
  ticketPrice: double('ticket_price'),
  budget: int(),
  market: smallint(),
  ownerExpectation: smallint('owner_expectation'),
})

export const humanManagerHistoryPitchingStats = mysqlTable('human_manager_history_pitching_stats', {
  humanManagerId: int('human_manager_id'),
  teamId: int('team_id'),
  year: smallint(),
  leagueId: int('league_id'),
  subLeagueId: int('sub_league_id'),
  divisionId: int('division_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  ab: int(),
  ip: int(),
  bf: int(),
  tb: int(),
  ha: int(),
  k: int(),
  rs: int(),
  bb: int(),
  r: int(),
  er: int(),
  gb: int(),
  fb: int(),
  pi: int(),
  ipf: int(),
  g: int(),
  gs: int(),
  w: int(),
  l: int(),
  s: int(),
  sa: int(),
  da: int(),
  sh: int(),
  sf: int(),
  ta: int(),
  hra: int(),
  bk: int(),
  ci: int(),
  iw: int(),
  wp: int(),
  hp: int(),
  gf: int(),
  dp: int(),
  qs: int(),
  svo: int(),
  bs: int(),
  ra: int(),
  cg: int(),
  sho: int(),
  sb: int(),
  cs: int(),
  hld: int(),
  r9: double(),
  avg: double(),
  obp: double(),
  slg: double(),
  ops: double(),
  h9: double(),
  k9: double(),
  hr9: double(),
  bb9: double(),
  cgp: double(),
  cera: double(),
  fip: double(),
  qsp: double(),
  winp: double(),
  rsg: double(),
  svp: double(),
  bsvp: double(),
  gfp: double(),
  era: double(),
  pig: double(),
  ws: double(),
  whip: double(),
  gbfbp: double(),
  kbb: double(),
  babip: double(),
})

export const humanManagerHistoryRecord = mysqlTable('human_manager_history_record', {
  humanManagerId: int('human_manager_id'),
  teamId: int('team_id'),
  year: smallint(),
  leagueId: int('league_id'),
  subLeagueId: int('sub_league_id'),
  divisionId: int('division_id'),
  g: smallint(),
  w: smallint(),
  l: smallint(),
  pos: smallint(),
  pct: double(),
  gb: double(),
  streak: smallint(),
  magicNumber: smallint('magic_number'),
})

export const languages = mysqlTable('languages', {
  languageId: int('language_id').notNull(),
  name: varchar({ length: 50 }),
})

export const languageData = mysqlTable('language_data', {
  parentTable: int('parent_table').notNull(),
  parentId: int('parent_id').notNull(),
  languageId: int('language_id').notNull(),
  percentage: int().notNull(),
})

export const leagues = mysqlTable('leagues', {
  leagueId: int('league_id').notNull(),
  name: varchar({ length: 50 }),
  abbr: varchar({ length: 50 }),
  nationId: int('nation_id'),
  languageId: int('language_id'),
  gender: int(),
  historicalLeague: tinyint('historical_league'),
  logoFileName: varchar('logo_file_name', { length: 200 }),
  playersPath: varchar('players_path', { length: 200 }),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  startDate: date('start_date', { mode: 'string' }),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  preferredStartDate: date('preferred_start_date', { mode: 'string' }),
  pitcherAwardName: varchar('pitcher_award_name', { length: 50 }),
  mvpAwardName: varchar('mvp_award_name', { length: 50 }),
  rookieAwardName: varchar('rookie_award_name', { length: 50 }),
  defenseAwardName: varchar('defense_award_name', { length: 50 }),
  fictionalPlayers: tinyint('fictional_players'),
  startFantasyDraft: tinyint('start_fantasy_draft'),
  tradingDeadline: tinyint('trading_deadline'),
  winterMeetings: tinyint('winter_meetings'),
  arbitrationOffering: tinyint('arbitration_offering'),
  showDraftPool: tinyint('show_draft_pool'),
  rostersExpanded: tinyint('rosters_expanded'),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  draftDate: date('draft_date', { mode: 'string' }),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  rule5DraftDate: date('rule_5_draft_date', { mode: 'string' }),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  internationalFaDate: date('international_fa_date', { mode: 'string' }),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  rosterExpandDate: date('roster_expand_date', { mode: 'string' }),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  tradeDeadlineDate: date('trade_deadline_date', { mode: 'string' }),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  allstarDate: date('allstar_date', { mode: 'string' }),
  daysUntilDeadline: int('days_until_deadline'),
  nextDraftType: int('next_draft_type'),
  parentLeagueId: int('parent_league_id'),
  leagueState: smallint('league_state'),
  seasonYear: int('season_year'),
  historicalYear: smallint('historical_year'),
  leagueLevel: smallint('league_level'),
  statsDetail: int('stats_detail'),
  historicalImportPath: varchar('historical_import_path', { length: 200 }),
  foreignerPercentage: smallint('foreigner_percentage'),
  wasOotp6: tinyint('was_ootp6'),
  was65: tinyint('was_65'),
  allstarGame: tinyint('allstar_game'),
  autoScheduleAllstar: tinyint('auto_schedule_allstar'),
  allstarTeamId0: int('allstar_team_id0'),
  allstarTeamId1: int('allstar_team_id1'),
  scheduleFile1: varchar('schedule_file_1', { length: 200 }),
  scheduleFile2: varchar('schedule_file_2', { length: 200 }),
  rulesRule5: tinyint('rules_rule_5'),
  rulesMinorLeagueOptions: tinyint('rules_minor_league_options'),
  rulesTrading: tinyint('rules_trading'),
  rulesTradingDeadlineEvents: smallint('rules_trading_deadline_events'),
  rulesDraftPickTrading: tinyint('rules_draft_pick_trading'),
  rulesFinancials: tinyint('rules_financials'),
  rulesAmateurDraft: tinyint('rules_amateur_draft'),
  rulesFaCompensation: smallint('rules_fa_compensation'),
  rulesScheduleBalanced: tinyint('rules_schedule_balanced'),
  rulesScheduleInterLeague: tinyint('rules_schedule_inter_league'),
  rulesScheduleForceStartDay: tinyint('rules_schedule_force_start_day'),
  rulesTradesOtherLeagues: tinyint('rules_trades_other_leagues'),
  rulesFreeAgentsFromOtherLeagues: tinyint('rules_free_agents_from_other_leagues'),
  rulesFreeAgentsLeaveOtherLeagues: tinyint('rules_free_agents_leave_other_leagues'),
  rulesAllstarGame: tinyint('rules_allstar_game'),
  rulesSpringTraining: tinyint('rules_spring_training'),
  rulesActiveRosterLimit: smallint('rules_active_roster_limit'),
  rulesSecondaryRosterLimit: smallint('rules_secondary_roster_limit'),
  rulesExpandedRosterLimit: smallint('rules_expanded_roster_limit'),
  rulesMinServiceDays: smallint('rules_min_service_days'),
  rulesWaiverPeriodLength: smallint('rules_waiver_period_length'),
  rulesDfaPeriodLength: smallint('rules_dfa_period_length'),
  rulesFaMinimumYears: smallint('rules_fa_minimum_years'),
  rulesSalaryArbitrationMinimumYears: smallint('rules_salary_arbitration_minimum_years'),
  rulesMinorLeagueFaMinimumYears: smallint('rules_minor_league_fa_minimum_years'),
  rulesForeignerLimit: smallint('rules_foreigner_limit'),
  rulesForeignerPitcherLimit: smallint('rules_foreigner_pitcher_limit'),
  rulesForeignerHitterLimit: smallint('rules_foreigner_hitter_limit'),
  rulesScheduleGamesPerTeam: smallint('rules_schedule_games_per_team'),
  rulesScheduleTypicalSeries: smallint('rules_schedule_typical_series'),
  rulesScheduleGameTimes: smallint('rules_schedule_game_times'),
  rulesSchedulePreferredStartDay: smallint('rules_schedule_preferred_start_day'),
  rulesAmateurDraftRounds: smallint('rules_amateur_draft_rounds'),
  rulesMinimumSalary: int('rules_minimum_salary'),
  rulesSalaryCap: int('rules_salary_cap'),
  rulesPlayerSalary0: int('rules_player_salary0'),
  rulesPlayerSalary1: int('rules_player_salary1'),
  rulesPlayerSalary2: int('rules_player_salary2'),
  rulesPlayerSalary3: int('rules_player_salary3'),
  rulesPlayerSalary4: int('rules_player_salary4'),
  rulesPlayerSalary5: int('rules_player_salary5'),
  rulesPlayerSalary6: int('rules_player_salary6'),
  rulesPlayerSalary7: int('rules_player_salary7'),
  rulesAverageCoachSalary: int('rules_average_coach_salary'),
  rulesAverageAttendance: int('rules_average_attendance'),
  rulesAverageNationalMediaContract: int('rules_average_national_media_contract'),
  rulesCashMaximum: int('rules_cash_maximum'),
  rulesAverageTicketPrice: double('rules_average_ticket_price'),
  rulesLuxurySharing: tinyint('rules_luxury_sharing'),
  rulesRevenueSharing: tinyint('rules_revenue_sharing'),
  rulesRevenueSharingTax: smallint('rules_revenue_sharing_tax'),
  rulesLuxurySharingCap: smallint('rules_luxury_sharing_cap'),
  rulesLuxuryTax: smallint('rules_luxury_tax'),
  rulesNationalMediaContractFixed: tinyint('rules_national_media_contract_fixed'),
  rulesOwnerDecidesBudget: tinyint('rules_owner_decides_budget'),
  rulesScheduleAutoAdjustDates: tinyint('rules_schedule_auto_adjust_dates'),
  rulesHistoricalImportRookies: tinyint('rules_historical_import_rookies'),
  avgRatingContact: int('avg_rating_contact'),
  avgRatingGap: int('avg_rating_gap'),
  avgRatingPower: int('avg_rating_power'),
  avgRatingEye: int('avg_rating_eye'),
  avgRatingStrikeouts: int('avg_rating_strikeouts'),
  avgRatingStuff: int('avg_rating_stuff'),
  avgRatingMovement: int('avg_rating_movement'),
  avgRatingControl: int('avg_rating_control'),
  avgRatingFielding0: int('avg_rating_fielding0'),
  avgRatingFielding1: int('avg_rating_fielding1'),
  avgRatingFielding2: int('avg_rating_fielding2'),
  avgRatingFielding3: int('avg_rating_fielding3'),
  avgRatingFielding4: int('avg_rating_fielding4'),
  avgRatingFielding5: int('avg_rating_fielding5'),
  avgRatingFielding6: int('avg_rating_fielding6'),
  avgRatingFielding7: int('avg_rating_fielding7'),
  avgRatingFielding8: int('avg_rating_fielding8'),
  avgRatingFielding9: int('avg_rating_fielding9'),
  avgRatingOverall: int('avg_rating_overall'),
  avgRatingAge: double('avg_rating_age'),
  leagueTotalsAb: int('league_totals_ab'),
  leagueTotalsH: int('league_totals_h'),
  leagueTotalsD: int('league_totals_d'),
  leagueTotalsT: int('league_totals_t'),
  leagueTotalsHr: int('league_totals_hr'),
  leagueTotalsBb: int('league_totals_bb'),
  leagueTotalsHp: int('league_totals_hp'),
  leagueTotalsK: int('league_totals_k'),
  leagueTotalsPa: int('league_totals_pa'),
  leagueTotalsBabip: double('league_totals_babip'),
  leagueTotalsModH: double('league_totals_mod_h'),
  leagueTotalsModD: double('league_totals_mod_d'),
  leagueTotalsModT: double('league_totals_mod_t'),
  leagueTotalsModHr: double('league_totals_mod_hr'),
  leagueTotalsModBb: double('league_totals_mod_bb'),
  leagueTotalsModHp: double('league_totals_mod_hp'),
  leagueTotalsModK: double('league_totals_mod_k'),
  leagueTotalsModBabip: double('league_totals_mod_babip'),
  mlEquivalenciesAvg: double('ml_equivalencies_avg'),
  mlEquivalenciesHr: double('ml_equivalencies_hr'),
  mlEquivalenciesEb: double('ml_equivalencies_eb'),
  mlEquivalenciesBb: double('ml_equivalencies_bb'),
  mlEquivalenciesK: double('ml_equivalencies_k'),
  mlEquivalenciesHp: double('ml_equivalencies_hp'),
  playerCreationModifierContact: double('player_creation_modifier_contact'),
  playerCreationModifierGap: double('player_creation_modifier_gap'),
  playerCreationModifierPower: double('player_creation_modifier_power'),
  playerCreationModifierEye: double('player_creation_modifier_eye'),
  playerCreationModifierStrikeouts: double('player_creation_modifier_strikeouts'),
  playerCreationModifierStuff: double('player_creation_modifier_stuff'),
  playerCreationModifierMovement: double('player_creation_modifier_movement'),
  playerCreationModifierControl: double('player_creation_modifier_control'),
  playerCreationModifierSpeed: double('player_creation_modifier_speed'),
  playerCreationModifierFielding: double('player_creation_modifier_fielding'),
  financialCoefficient: double('financial_coefficient'),
  worldStartYear: int('world_start_year'),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  currentDate: date('current_date', { mode: 'string' }),
  backgroundColorId: varchar('background_color_id', { length: 8 }),
  textColorId: varchar('text_color_id', { length: 8 }),
  scoutingCoachId: int('scouting_coach_id'),
})

export const leagueEvents = mysqlTable('league_events', {
  leagueId: int('league_id'),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  startDate: date('start_date', { mode: 'string' }),
  type: smallint(),
  eventOver: tinyint('event_over'),
  deleted: tinyint(),
  name: varchar({ length: 50 }),
  needsHumanAction: tinyint('needs_human_action'),
  realSimDate: smallint('real_sim_date'),
})

export const leagueHistory = mysqlTable('league_history', {
  leagueId: int('league_id'),
  subLeagueId: int('sub_league_id'),
  year: int(),
  bestHitterId: int('best_hitter_id'),
  bestPitcherId: int('best_pitcher_id'),
  bestRookieId: int('best_rookie_id'),
  bestManagerId: int('best_manager_id'),
  bestFielderId0: int('best_fielder_id0'),
  bestFielderId1: int('best_fielder_id1'),
  bestFielderId2: int('best_fielder_id2'),
  bestFielderId3: int('best_fielder_id3'),
  bestFielderId4: int('best_fielder_id4'),
  bestFielderId5: int('best_fielder_id5'),
  bestFielderId6: int('best_fielder_id6'),
  bestFielderId7: int('best_fielder_id7'),
  bestFielderId8: int('best_fielder_id8'),
  bestFielderId9: int('best_fielder_id9'),
})

export const leagueHistoryAllStar = mysqlTable('league_history_all_star', {
  leagueId: int('league_id'),
  subLeagueId: int('sub_league_id'),
  year: int(),
  allStarPos: int('all_star_pos'),
  allStar: int('all_star'),
})

export const leagueHistoryBattingStats = mysqlTable('league_history_batting_stats', {
  year: smallint(),
  teamId: int('team_id'),
  gameId: int('game_id'),
  leagueId: int('league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  pa: int(),
  ab: int(),
  h: int(),
  k: int(),
  tb: int(),
  s: int(),
  d: int(),
  t: int(),
  hr: int(),
  sb: int(),
  cs: int(),
  rbi: int(),
  r: int(),
  bb: int(),
  ibb: int(),
  hp: int(),
  sh: int(),
  sf: int(),
  ci: int(),
  gdp: int(),
  g: int(),
  gs: int(),
  ebh: int(),
  pitchesSeen: int('pitches_seen'),
  avg: double(),
  obp: double(),
  slg: double(),
  rc: double(),
  rc27: double(),
  iso: double(),
  woba: double(),
  ops: double(),
  sbp: double(),
  kp: double(),
  bbp: double(),
  wpa: double(),
  babip: double(),
})

export const leagueHistoryFieldingStats = mysqlTable('league_history_fielding_stats', {
  year: smallint(),
  teamId: int('team_id'),
  leagueId: int('league_id'),
  subLeagueId: int('sub_league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  position: smallint(),
  g: int(),
  gs: int(),
  tc: int(),
  a: int(),
  po: int(),
  e: int(),
  dp: int(),
  tp: int(),
  pb: int(),
  sba: int(),
  rto: int(),
  er: int(),
  ip: int(),
  ipf: int(),
  pct: double(),
  range: double(),
  rtop: double(),
  cera: double(),
  zr: double(),
  plays: int(),
  playsBase: int('plays_base'),
  roe: int(),
  eff: int(),
  opps0: int('opps_0'),
  oppsMade0: int('opps_made_0'),
  opps1: int('opps_1'),
  oppsMade1: int('opps_made_1'),
  opps2: int('opps_2'),
  oppsMade2: int('opps_made_2'),
  opps3: int('opps_3'),
  oppsMade3: int('opps_made_3'),
  opps4: int('opps_4'),
  oppsMade4: int('opps_made_4'),
  opps5: int('opps_5'),
  oppsMade5: int('opps_made_5'),
  framing: double(),
  arm: double(),
})

export const leagueHistoryPitchingStats = mysqlTable('league_history_pitching_stats', {
  year: smallint(),
  teamId: int('team_id'),
  gameId: int('game_id'),
  leagueId: int('league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  ab: int(),
  ip: int(),
  bf: int(),
  tb: int(),
  ha: int(),
  k: int(),
  rs: int(),
  bb: int(),
  r: int(),
  er: int(),
  gb: int(),
  fb: int(),
  pi: int(),
  ipf: int(),
  g: int(),
  gs: int(),
  w: int(),
  l: int(),
  s: int(),
  sa: int(),
  da: int(),
  sh: int(),
  sf: int(),
  ta: int(),
  hra: int(),
  bk: int(),
  ci: int(),
  iw: int(),
  wp: int(),
  hp: int(),
  gf: int(),
  dp: int(),
  qs: int(),
  svo: int(),
  bs: int(),
  ra: int(),
  ir: int(),
  irs: int(),
  cg: int(),
  sho: int(),
  sb: int(),
  cs: int(),
  hld: int(),
  r9: double(),
  avg: double(),
  obp: double(),
  slg: double(),
  ops: double(),
  h9: double(),
  k9: double(),
  kp: double(),
  bbp: double(),
  kbbp: double(),
  hr9: double(),
  bb9: double(),
  cgp: double(),
  fip: double(),
  qsp: double(),
  winp: double(),
  rsg: double(),
  svp: double(),
  bsvp: double(),
  irsp: double(),
  gfp: double(),
  era: double(),
  pig: double(),
  ws: double(),
  whip: double(),
  gbfbp: double(),
  kbb: double(),
  babip: double(),
  wpa: double(),
  war: double(),
  ra9War: double(),
  sd: int(),
  md: int(),
})

export const leaguePlayoffs = mysqlTable('league_playoffs', {
  leagueId: int('league_id'),
  playOffMode: smallint('play_off_mode'),
  round: smallint(),
  maxRound: smallint('max_round'),
  numWildCards: smallint('num_wild_cards'),
  bestOf0: smallint('best_of0'),
  bestOf1: smallint('best_of1'),
  bestOf2: smallint('best_of2'),
  bestOf3: smallint('best_of3'),
  bestOf4: smallint('best_of4'),
  bestOf5: smallint('best_of5'),
  bestOf6: smallint('best_of6'),
  bestOf7: smallint('best_of7'),
  bestOf8: smallint('best_of8'),
  bestOf9: smallint('best_of9'),
  bestOf10: smallint('best_of10'),
  bestOf11: smallint('best_of11'),
  bestOf12: smallint('best_of12'),
  bestOf13: smallint('best_of13'),
  bestOf14: smallint('best_of14'),
  bestOf15: smallint('best_of15'),
  bestOf16: smallint('best_of16'),
  bestOf17: smallint('best_of17'),
  bestOf18: smallint('best_of18'),
  bestOf19: smallint('best_of19'),
  bestOf20: smallint('best_of20'),
  bestOf21: smallint('best_of21'),
  bestOf22: smallint('best_of22'),
  bestOf23: smallint('best_of23'),
  bestOf24: smallint('best_of24'),
  bestOf25: smallint('best_of25'),
  bestOf26: smallint('best_of26'),
  bestOf27: smallint('best_of27'),
  bestOf28: smallint('best_of28'),
  bestOf29: smallint('best_of29'),
  bestOf30: smallint('best_of30'),
  bestOf31: smallint('best_of31'),
  bestOf32: smallint('best_of32'),
  bestOf33: smallint('best_of33'),
  bestOf34: smallint('best_of34'),
  bestOf35: smallint('best_of35'),
  bestOf36: smallint('best_of36'),
  bestOf37: smallint('best_of37'),
  bestOf38: smallint('best_of38'),
  bestOf39: smallint('best_of39'),
  bestOf40: smallint('best_of40'),
  bestOf41: smallint('best_of41'),
  bestOf42: smallint('best_of42'),
  bestOf43: smallint('best_of43'),
  bestOf44: smallint('best_of44'),
  bestOf45: smallint('best_of45'),
  bestOf46: smallint('best_of46'),
  bestOf47: smallint('best_of47'),
  bestOf48: smallint('best_of48'),
  bestOf49: smallint('best_of49'),
  roundNames0: varchar('round_names0', { length: 30 }),
  roundNames1: varchar('round_names1', { length: 30 }),
  roundNames2: varchar('round_names2', { length: 30 }),
  roundNames3: varchar('round_names3', { length: 30 }),
  roundNames4: varchar('round_names4', { length: 30 }),
  roundNames5: varchar('round_names5', { length: 30 }),
  roundNames6: varchar('round_names6', { length: 30 }),
  roundNames7: varchar('round_names7', { length: 30 }),
  roundNames8: varchar('round_names8', { length: 30 }),
  roundNames9: varchar('round_names9', { length: 30 }),
  roundNames10: varchar('round_names10', { length: 30 }),
  roundNames11: varchar('round_names11', { length: 30 }),
  roundNames12: varchar('round_names12', { length: 30 }),
  roundNames13: varchar('round_names13', { length: 30 }),
  roundNames14: varchar('round_names14', { length: 30 }),
  roundNames15: varchar('round_names15', { length: 30 }),
  roundNames16: varchar('round_names16', { length: 30 }),
  roundNames17: varchar('round_names17', { length: 30 }),
  roundNames18: varchar('round_names18', { length: 30 }),
  roundNames19: varchar('round_names19', { length: 30 }),
  roundNames20: varchar('round_names20', { length: 30 }),
  roundNames21: varchar('round_names21', { length: 30 }),
  roundNames22: varchar('round_names22', { length: 30 }),
  roundNames23: varchar('round_names23', { length: 30 }),
  roundNames24: varchar('round_names24', { length: 30 }),
  roundNames25: varchar('round_names25', { length: 30 }),
  roundNames26: varchar('round_names26', { length: 30 }),
  roundNames27: varchar('round_names27', { length: 30 }),
  roundNames28: varchar('round_names28', { length: 30 }),
  roundNames29: varchar('round_names29', { length: 30 }),
  roundNames30: varchar('round_names30', { length: 30 }),
  roundNames31: varchar('round_names31', { length: 30 }),
  roundNames32: varchar('round_names32', { length: 30 }),
  roundNames33: varchar('round_names33', { length: 30 }),
  roundNames34: varchar('round_names34', { length: 30 }),
  roundNames35: varchar('round_names35', { length: 30 }),
  roundNames36: varchar('round_names36', { length: 30 }),
  roundNames37: varchar('round_names37', { length: 30 }),
  roundNames38: varchar('round_names38', { length: 30 }),
  roundNames39: varchar('round_names39', { length: 30 }),
  roundNames40: varchar('round_names40', { length: 30 }),
  roundNames41: varchar('round_names41', { length: 30 }),
  roundNames42: varchar('round_names42', { length: 30 }),
  roundNames43: varchar('round_names43', { length: 30 }),
  roundNames44: varchar('round_names44', { length: 30 }),
  roundNames45: varchar('round_names45', { length: 30 }),
  roundNames46: varchar('round_names46', { length: 30 }),
  roundNames47: varchar('round_names47', { length: 30 }),
  roundNames48: varchar('round_names48', { length: 30 }),
  roundNames49: varchar('round_names49', { length: 30 }),
  splitSeason: tinyint('split_season'),
  allstarWinnerHomefield: tinyint('allstar_winner_homefield'),
  allstarWinner: int('allstar_winner'),
  winner: int(),
})

export const leaguePlayoffFixtures = mysqlTable('league_playoff_fixtures', {
  leagueId: int('league_id'),
  teamId0: int('team_id0'),
  teamId1: int('team_id1'),
  winner: int(),
  finished: tinyint(),
  bestOf: smallint('best_of'),
  played: smallint(),
  round: smallint(),
  result0: smallint(),
  result1: smallint(),
})

export const messages = mysqlTable('messages', {
  messageId: int('message_id').notNull(),
  subject: varchar({ length: 255 }),
  playerId0: int('player_id_0'),
  playerId1: int('player_id_1'),
  playerId2: int('player_id_2'),
  playerId3: int('player_id_3'),
  playerId4: int('player_id_4'),
  playerId5: int('player_id_5'),
  playerId6: int('player_id_6'),
  playerId7: int('player_id_7'),
  playerId8: int('player_id_8'),
  playerId9: int('player_id_9'),
  teamId0: int('team_id_0'),
  teamId1: int('team_id_1'),
  teamId2: int('team_id_2'),
  teamId3: int('team_id_3'),
  teamId4: int('team_id_4'),
  leagueId0: int('league_id_0'),
  leagueId1: int('league_id_1'),
  importance: int(),
  messageType: int('message_type'),
  hype: smallint(),
  senderType: int('sender_type'),
  senderId: int('sender_id'),
  recipientId: int('recipient_id'),
  tradeId: int('trade_id'),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  date: date({ mode: 'string' }),
  deleted: tinyint(),
  notify: tinyint(),
  ongoingStoryId: int('ongoing_story_id'),
  textIsModified: tinyint('text_is_modified'),
})

export const nations = mysqlTable('nations', {
  nationId: int('nation_id').notNull(),
  name: varchar({ length: 50 }),
  shortName: varchar('short_name', { length: 50 }),
  abbreviation: varchar({ length: 50 }),
  demonym: varchar({ length: 50 }),
  population: int(),
  gender: int(),
  baseballQuality: int('baseball_quality'),
  continentId: int('continent_id'),
  mainLanguageId: int('main_language_id'),
  qualityTotal: int('quality_total'),
  capitalId: int('capital_id'),
  useHardcodedMlPlayerOrigins: tinyint('use_hardcoded_ml_player_origins'),
  thisIsTheUsa: tinyint('this_is_the_usa'),
})

export const parks = mysqlTable('parks', {
  parkId: int('park_id').notNull(),
  dimensionsX: smallint('dimensions_x'),
  dimensionsY: smallint('dimensions_y'),
  batterLeftX: smallint('batter_left_x'),
  batterLeftY: smallint('batter_left_y'),
  batterRightX: smallint('batter_right_x'),
  batterRightY: smallint('batter_right_y'),
  basesX0: smallint('bases_x0'),
  basesX1: smallint('bases_x1'),
  basesX2: smallint('bases_x2'),
  basesY0: smallint('bases_y0'),
  basesY1: smallint('bases_y1'),
  basesY2: smallint('bases_y2'),
  positionsX0: smallint('positions_x0'),
  positionsX1: smallint('positions_x1'),
  positionsX2: smallint('positions_x2'),
  positionsX3: smallint('positions_x3'),
  positionsX4: smallint('positions_x4'),
  positionsX5: smallint('positions_x5'),
  positionsX6: smallint('positions_x6'),
  positionsX7: smallint('positions_x7'),
  positionsX8: smallint('positions_x8'),
  positionsX9: smallint('positions_x9'),
  positionsY0: smallint('positions_y0'),
  positionsY1: smallint('positions_y1'),
  positionsY2: smallint('positions_y2'),
  positionsY3: smallint('positions_y3'),
  positionsY4: smallint('positions_y4'),
  positionsY5: smallint('positions_y5'),
  positionsY6: smallint('positions_y6'),
  positionsY7: smallint('positions_y7'),
  positionsY8: smallint('positions_y8'),
  positionsY9: smallint('positions_y9'),
  avg: double(),
  avgL: double('avg_l'),
  avgR: double('avg_r'),
  d: double(),
  t: double(),
  hr: double(),
  hrR: double('hr_r'),
  hrL: double('hr_l'),
  temperature0: smallint(),
  temperature1: smallint(),
  temperature2: smallint(),
  temperature3: smallint(),
  temperature4: smallint(),
  temperature5: smallint(),
  temperature6: smallint(),
  temperature7: smallint(),
  temperature8: smallint(),
  temperature9: smallint(),
  temperature10: smallint(),
  temperature11: smallint(),
  rain0: smallint(),
  rain1: smallint(),
  rain2: smallint(),
  rain3: smallint(),
  rain4: smallint(),
  rain5: smallint(),
  rain6: smallint(),
  rain7: smallint(),
  rain8: smallint(),
  rain9: smallint(),
  rain10: smallint(),
  rain11: smallint(),
  wind: smallint(),
  windDirection: smallint('wind_direction'),
  distances0: smallint(),
  distances1: smallint(),
  distances2: smallint(),
  distances3: smallint(),
  distances4: smallint(),
  distances5: smallint(),
  distances6: smallint(),
  wallHeights0: smallint('wall_heights0'),
  wallHeights1: smallint('wall_heights1'),
  wallHeights2: smallint('wall_heights2'),
  wallHeights3: smallint('wall_heights3'),
  wallHeights4: smallint('wall_heights4'),
  wallHeights5: smallint('wall_heights5'),
  wallHeights6: smallint('wall_heights6'),
  name: varchar({ length: 100 }),
  picture: varchar({ length: 200 }),
  pictureNight: varchar('picture_night', { length: 200 }),
  nationId: int('nation_id'),
  capacity: int(),
  type: smallint(),
  foulGround: smallint('foul_ground'),
  turf: tinyint(),
  gender: int(),
  modelFolder: varchar('model_folder', { length: 200 }),
  fileName3DModel: varchar('file_name_3d_model', { length: 200 }),
  homeTeamDugoutIsAtFirstBase: tinyint('home_team_dugout_is_at_first_base'),
})

export const players = mysqlTable('players', {
  playerId: int('player_id'),
  teamId: int('team_id'),
  leagueId: int('league_id'),
  position: smallint(),
  role: smallint(),
  firstName: varchar('first_name', { length: 50 }),
  lastName: varchar('last_name', { length: 50 }),
  nickName: varchar('nick_name', { length: 50 }),
  age: smallint(),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  dateOfBirth: date('date_of_birth', { mode: 'string' }),
  cityOfBirthId: int('city_of_birth_id'),
  nationId: int('nation_id'),
  secondNationId: int('second_nation_id'),
  weight: smallint(),
  height: smallint(),
  retired: tinyint(),
  freeAgent: tinyint('free_agent'),
  lastLeagueId: int('last_league_id'),
  lastTeamId: int('last_team_id'),
  organizationId: int('organization_id'),
  lastOrganizationId: int('last_organization_id'),
  languageIds0: int('language_ids0'),
  languageIds1: int('language_ids1'),
  uniformNumber: smallint('uniform_number'),
  experience: smallint(),
  personType: smallint('person_type'),
  bats: smallint(),
  throws: smallint(),
  personalityGreed: smallint('personality_greed'),
  personalityLoyalty: smallint('personality_loyalty'),
  personalityPlayForWinner: smallint('personality_play_for_winner'),
  personalityWorkEthic: smallint('personality_work_ethic'),
  personalityIntelligence: smallint('personality_intelligence'),
  personalityLeader: smallint('personality_leader'),
  historicalId: varchar('historical_id', { length: 50 }),
  historicalTeamId: varchar('historical_team_id', { length: 50 }),
  bestContractOfferId: int('best_contract_offer_id'),
  injuryIsInjured: tinyint('injury_is_injured'),
  injuryDtdInjury: tinyint('injury_dtd_injury'),
  injuryCareerEnding: tinyint('injury_career_ending'),
  injuryDlLeft: smallint('injury_dl_left'),
  injuryDlPlayoffRound: smallint('injury_dl_playoff_round'),
  injuryLeft: smallint('injury_left'),
  dtdInjuryEffect: smallint('dtd_injury_effect'),
  dtdInjuryEffectHit: smallint('dtd_injury_effect_hit'),
  dtdInjuryEffectThrow: smallint('dtd_injury_effect_throw'),
  dtdInjuryEffectRun: smallint('dtd_injury_effect_run'),
  injuryId: smallint('injury_id'),
  injuryId2: smallint('injury_id2'),
  injuryDtdInjury2: tinyint('injury_dtd_injury2'),
  injuryLeft2: smallint('injury_left2'),
  dtdInjuryEffect2: smallint('dtd_injury_effect2'),
  dtdInjuryEffectHit2: smallint('dtd_injury_effect_hit2'),
  dtdInjuryEffectThrow2: smallint('dtd_injury_effect_throw2'),
  dtdInjuryEffectRun2: smallint('dtd_injury_effect_run2'),
  proneOverall: smallint('prone_overall'),
  proneLeg: smallint('prone_leg'),
  proneBack: smallint('prone_back'),
  proneArm: smallint('prone_arm'),
  fatiguePitches0: smallint('fatigue_pitches0'),
  fatiguePitches1: smallint('fatigue_pitches1'),
  fatiguePitches2: smallint('fatigue_pitches2'),
  fatiguePitches3: smallint('fatigue_pitches3'),
  fatiguePitches4: smallint('fatigue_pitches4'),
  fatiguePitches5: smallint('fatigue_pitches5'),
  fatiguePoints: smallint('fatigue_points'),
  fatiguePlayedToday: tinyint('fatigue_played_today'),
  runningRatingsSpeed: smallint('running_ratings_speed'),
  runningRatingsStealing: smallint('running_ratings_stealing'),
  runningRatingsBaserunning: smallint('running_ratings_baserunning'),
  college: tinyint(),
  acquired: smallint(),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  acquiredDate: date('acquired_date', { mode: 'string' }),
  draftYear: smallint('draft_year'),
  draftRound: smallint('draft_round'),
  draftSupplemental: tinyint('draft_supplemental'),
  draftPick: smallint('draft_pick'),
  draftOverallPick: smallint('draft_overall_pick'),
  draftEligible: tinyint('draft_eligible'),
  hscStatus: smallint('hsc_status'),
  redshirt: tinyint(),
  pickedInDraft: tinyint('picked_in_draft'),
  school: smallint(),
  commitSchool: smallint('commit_school'),
  hidden: tinyint(),
  draftLeagueId: int('draft_league_id'),
  draftTeamId: int('draft_team_id'),
  turnedCoach: tinyint('turned_coach'),
  hallOfFame: tinyint('hall_of_fame'),
  rust: smallint(),
  inducted: smallint(),
  strategyOverrideTeam: tinyint('strategy_override_team'),
  strategyStealing: int('strategy_stealing'),
  strategyRunning: int('strategy_running'),
  strategyBuntForHit: int('strategy_bunt_for_hit'),
  strategySacBunt: int('strategy_sac_bunt'),
  strategyHitRun: int('strategy_hit_run'),
  strategyHookStart: int('strategy_hook_start'),
  strategyHookRelief: int('strategy_hook_relief'),
  strategyPitchCount: int('strategy_pitch_count'),
  strategyPitchAround: int('strategy_pitch_around'),
  strategyNeverPinchHit: tinyint('strategy_never_pinch_hit'),
  strategyDefensiveSub: tinyint('strategy_defensive_sub'),
  strategyDtdSitMin: tinyint('strategy_dtd_sit_min'),
  strategyDtdAllowPh: tinyint('strategy_dtd_allow_ph'),
  localPop: smallint('local_pop'),
  nationalPop: smallint('national_pop'),
  draftProtected: tinyint('draft_protected'),
  morale: smallint(),
  moralePlayerPerformance: smallint('morale_player_performance'),
  moraleTeamPerformance: smallint('morale_team_performance'),
  moraleTeamTransactions: smallint('morale_team_transactions'),
  expectation: smallint(),
  moralePlayerRole: smallint('morale_player_role'),
  onLoan: tinyint('on_loan'),
  loanLeagueId: int('loan_league_id'),
  loanTeamId: int('loan_team_id'),
})

export const playersAtBatBattingStats = mysqlTable('players_at_bat_batting_stats', {
  playerId: int('player_id'),
  gameId: int('game_id'),
  opponentPlayerId: int('opponent_player_id'),
  teamId: int('team_id'),
  sac: tinyint(),
  balls: smallint(),
  strikes: smallint(),
  result: smallint(),
  base1: tinyint(),
  base2: tinyint(),
  base3: tinyint(),
  close: tinyint('Close'),
  pinch: tinyint(),
  inning: smallint(),
  runDiff: smallint('run_diff'),
  outs: smallint(),
  sb: smallint(),
  cs: smallint(),
  rbi: smallint(),
  r: smallint(),
  spot: smallint(),
  hitLoc: smallint('hit_loc'),
  hitXy: smallint('hit_xy'),
  exitVelo: smallint('exit_velo'),
  launchAngle: smallint('launch_angle'),
})

export const playersAwards = mysqlTable('players_awards', {
  playerId: int('player_id'),
  leagueId: int('league_id'),
  teamId: int('team_id'),
  subLeagueId: smallint('sub_league_id'),
  awardId: smallint('award_id'),
  year: smallint(),
  season: smallint(),
  position: smallint(),
  day: smallint(),
  month: smallint(),
  finish: smallint(),
})

export const playersBatting = mysqlTable('players_batting', {
  playerId: int('player_id'),
  teamId: int('team_id'),
  leagueId: int('league_id'),
  position: smallint(),
  role: smallint(),
  battingRatingsOverallContact: smallint('batting_ratings_overall_contact'),
  battingRatingsOverallGap: smallint('batting_ratings_overall_gap'),
  battingRatingsOverallEye: smallint('batting_ratings_overall_eye'),
  battingRatingsOverallStrikeouts: smallint('batting_ratings_overall_strikeouts'),
  battingRatingsOverallHp: smallint('batting_ratings_overall_hp'),
  battingRatingsOverallPower: smallint('batting_ratings_overall_power'),
  battingRatingsOverallBabip: smallint('batting_ratings_overall_babip'),
  battingRatingsVsrContact: smallint('batting_ratings_vsr_contact'),
  battingRatingsVsrGap: smallint('batting_ratings_vsr_gap'),
  battingRatingsVsrEye: smallint('batting_ratings_vsr_eye'),
  battingRatingsVsrStrikeouts: smallint('batting_ratings_vsr_strikeouts'),
  battingRatingsVsrHp: smallint('batting_ratings_vsr_hp'),
  battingRatingsVsrPower: smallint('batting_ratings_vsr_power'),
  battingRatingsVsrBabip: smallint('batting_ratings_vsr_babip'),
  battingRatingsVslContact: smallint('batting_ratings_vsl_contact'),
  battingRatingsVslGap: smallint('batting_ratings_vsl_gap'),
  battingRatingsVslEye: smallint('batting_ratings_vsl_eye'),
  battingRatingsVslStrikeouts: smallint('batting_ratings_vsl_strikeouts'),
  battingRatingsVslHp: smallint('batting_ratings_vsl_hp'),
  battingRatingsVslPower: smallint('batting_ratings_vsl_power'),
  battingRatingsVslBabip: smallint('batting_ratings_vsl_babip'),
  battingRatingsTalentContact: smallint('batting_ratings_talent_contact'),
  battingRatingsTalentGap: smallint('batting_ratings_talent_gap'),
  battingRatingsTalentEye: smallint('batting_ratings_talent_eye'),
  battingRatingsTalentStrikeouts: smallint('batting_ratings_talent_strikeouts'),
  battingRatingsTalentHp: smallint('batting_ratings_talent_hp'),
  battingRatingsTalentPower: smallint('batting_ratings_talent_power'),
  battingRatingsTalentBabip: smallint('batting_ratings_talent_babip'),
  battingRatingsMiscBunt: smallint('batting_ratings_misc_bunt'),
  battingRatingsMiscBuntForHit: smallint('batting_ratings_misc_bunt_for_hit'),
  battingRatingsMiscGbHitterType: smallint('batting_ratings_misc_gb_hitter_type'),
  battingRatingsMiscFbHitterType: smallint('batting_ratings_misc_fb_hitter_type'),
})

export const playersCareerBattingStats = mysqlTable('players_career_batting_stats', {
  playerId: int('player_id'),
  year: smallint(),
  teamId: int('team_id'),
  gameId: int('game_id'),
  leagueId: int('league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  position: smallint(),
  ab: smallint(),
  h: smallint(),
  k: smallint(),
  pa: smallint(),
  pitchesSeen: smallint('pitches_seen'),
  g: smallint(),
  gs: smallint(),
  d: smallint(),
  t: smallint(),
  hr: smallint(),
  r: smallint(),
  rbi: smallint(),
  sb: smallint(),
  cs: smallint(),
  bb: smallint(),
  ibb: smallint(),
  gdp: smallint(),
  sh: smallint(),
  sf: smallint(),
  hp: smallint(),
  ci: smallint(),
  wpa: double(),
  stint: smallint(),
  ubr: double(),
  war: double(),
})

export const playersCareerFieldingStats = mysqlTable('players_career_fielding_stats', {
  playerId: int('player_id'),
  year: smallint(),
  teamId: int('team_id'),
  leagueId: int('league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  position: smallint(),
  tc: smallint(),
  a: smallint(),
  po: smallint(),
  er: smallint(),
  ip: smallint(),
  g: smallint(),
  gs: smallint(),
  e: smallint(),
  dp: smallint(),
  tp: smallint(),
  pb: smallint(),
  sba: smallint(),
  rto: smallint(),
  ipf: smallint(),
  plays: smallint(),
  playsBase: smallint('plays_base'),
  roe: smallint(),
  opps0: smallint('opps_0'),
  oppsMade0: smallint('opps_made_0'),
  opps1: smallint('opps_1'),
  oppsMade1: smallint('opps_made_1'),
  opps2: smallint('opps_2'),
  oppsMade2: smallint('opps_made_2'),
  opps3: smallint('opps_3'),
  oppsMade3: smallint('opps_made_3'),
  opps4: smallint('opps_4'),
  oppsMade4: smallint('opps_made_4'),
  opps5: smallint('opps_5'),
  oppsMade5: smallint('opps_made_5'),
  framing: double(),
  arm: double(),
  zr: double(),
})

export const playersCareerPitchingStats = mysqlTable('players_career_pitching_stats', {
  playerId: int('player_id'),
  year: smallint(),
  teamId: int('team_id'),
  gameId: int('game_id'),
  leagueId: int('league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  ip: smallint(),
  ab: smallint(),
  tb: smallint(),
  ha: smallint(),
  k: smallint(),
  bf: smallint(),
  rs: smallint(),
  bb: smallint(),
  r: smallint(),
  er: smallint(),
  gb: smallint(),
  fb: smallint(),
  pi: smallint(),
  ipf: smallint(),
  g: smallint(),
  gs: smallint(),
  w: smallint(),
  l: smallint(),
  s: smallint(),
  sa: smallint(),
  da: smallint(),
  sh: smallint(),
  sf: smallint(),
  ta: smallint(),
  hra: smallint(),
  bk: smallint(),
  ci: smallint(),
  iw: smallint(),
  wp: smallint(),
  hp: smallint(),
  gf: smallint(),
  dp: smallint(),
  qs: smallint(),
  svo: smallint(),
  bs: smallint(),
  ra: smallint(),
  cg: smallint(),
  sho: smallint(),
  sb: smallint(),
  cs: smallint(),
  hld: smallint(),
  ir: double(),
  irs: double(),
  wpa: double(),
  li: double(),
  stint: smallint(),
  outs: smallint(),
  sd: smallint(),
  md: smallint(),
  war: double(),
  ra9War: double(),
})

export const playersContract = mysqlTable('players_contract', {
  playerId: int('player_id'),
  teamId: int('team_id'),
  leagueId: int('league_id'),
  position: smallint(),
  role: smallint(),
  isMajor: tinyint('is_major'),
  noTrade: tinyint('no_trade'),
  lastYearTeamOption: tinyint('last_year_team_option'),
  lastYearPlayerOption: tinyint('last_year_player_option'),
  lastYearVestingOption: tinyint('last_year_vesting_option'),
  nextLastYearTeamOption: tinyint('next_last_year_team_option'),
  nextLastYearPlayerOption: tinyint('next_last_year_player_option'),
  nextLastYearVestingOption: tinyint('next_last_year_vesting_option'),
  contractTeamId: int('contract_team_id'),
  contractLeagueId: int('contract_league_id'),
  seasonYear: int('season_year'),
  salary0: int(),
  salary1: int(),
  salary2: int(),
  salary3: int(),
  salary4: int(),
  salary5: int(),
  salary6: int(),
  salary7: int(),
  salary8: int(),
  salary9: int(),
  salary10: int(),
  salary11: int(),
  salary12: int(),
  salary13: int(),
  salary14: int(),
  years: smallint(),
  currentYear: smallint('current_year'),
  minimumPa: smallint('minimum_pa'),
  minimumPaBonus: int('minimum_pa_bonus'),
  minimumIp: smallint('minimum_ip'),
  minimumIpBonus: int('minimum_ip_bonus'),
  mvpBonus: int('mvp_bonus'),
  cyyoungBonus: int('cyyoung_bonus'),
  allstarBonus: int('allstar_bonus'),
  nextLastYearOptionBuyout: int('next_last_year_option_buyout'),
  lastYearOptionBuyout: int('last_year_option_buyout'),
  optOut: smallint('opt_out'),
  optOutRelegation: tinyint('opt_out_relegation'),
  retained: smallint(),
})

export const playersContractExtension = mysqlTable('players_contract_extension', {
  playerId: int('player_id'),
  teamId: int('team_id'),
  leagueId: int('league_id'),
  position: smallint(),
  role: smallint(),
  isMajor: tinyint('is_major'),
  noTrade: tinyint('no_trade'),
  lastYearTeamOption: tinyint('last_year_team_option'),
  lastYearPlayerOption: tinyint('last_year_player_option'),
  lastYearVestingOption: tinyint('last_year_vesting_option'),
  nextLastYearTeamOption: tinyint('next_last_year_team_option'),
  nextLastYearPlayerOption: tinyint('next_last_year_player_option'),
  nextLastYearVestingOption: tinyint('next_last_year_vesting_option'),
  contractTeamId: int('contract_team_id'),
  contractLeagueId: int('contract_league_id'),
  seasonYear: int('season_year'),
  salary0: int(),
  salary1: int(),
  salary2: int(),
  salary3: int(),
  salary4: int(),
  salary5: int(),
  salary6: int(),
  salary7: int(),
  salary8: int(),
  salary9: int(),
  salary10: int(),
  salary11: int(),
  salary12: int(),
  salary13: int(),
  salary14: int(),
  years: smallint(),
  currentYear: smallint('current_year'),
  minimumPa: smallint('minimum_pa'),
  minimumPaBonus: int('minimum_pa_bonus'),
  minimumIp: smallint('minimum_ip'),
  minimumIpBonus: int('minimum_ip_bonus'),
  mvpBonus: int('mvp_bonus'),
  cyyoungBonus: int('cyyoung_bonus'),
  allstarBonus: int('allstar_bonus'),
  nextLastYearOptionBuyout: int('next_last_year_option_buyout'),
  lastYearOptionBuyout: int('last_year_option_buyout'),
  optOut: smallint('opt_out'),
  optOutRelegation: tinyint('opt_out_relegation'),
})

export const playersFielding = mysqlTable('players_fielding', {
  playerId: int('player_id'),
  teamId: int('team_id'),
  leagueId: int('league_id'),
  position: smallint(),
  role: smallint(),
  fieldingRatingsInfieldRange: smallint('fielding_ratings_infield_range'),
  fieldingRatingsInfieldArm: smallint('fielding_ratings_infield_arm'),
  fieldingRatingsTurnDoubleplay: smallint('fielding_ratings_turn_doubleplay'),
  fieldingRatingsOutfieldRange: smallint('fielding_ratings_outfield_range'),
  fieldingRatingsOutfieldArm: smallint('fielding_ratings_outfield_arm'),
  fieldingRatingsCatcherArm: smallint('fielding_ratings_catcher_arm'),
  fieldingRatingsCatcherAbility: smallint('fielding_ratings_catcher_ability'),
  fieldingRatingsInfieldError: smallint('fielding_ratings_infield_error'),
  fieldingRatingsOutfieldError: smallint('fielding_ratings_outfield_error'),
  fieldingExperience0: smallint('fielding_experience0'),
  fieldingExperience1: smallint('fielding_experience1'),
  fieldingExperience2: smallint('fielding_experience2'),
  fieldingExperience3: smallint('fielding_experience3'),
  fieldingExperience4: smallint('fielding_experience4'),
  fieldingExperience5: smallint('fielding_experience5'),
  fieldingExperience6: smallint('fielding_experience6'),
  fieldingExperience7: smallint('fielding_experience7'),
  fieldingExperience8: smallint('fielding_experience8'),
  fieldingExperience9: smallint('fielding_experience9'),
  fieldingRatingPos1: smallint('fielding_rating_pos1'),
  fieldingRatingPos2: smallint('fielding_rating_pos2'),
  fieldingRatingPos3: smallint('fielding_rating_pos3'),
  fieldingRatingPos4: smallint('fielding_rating_pos4'),
  fieldingRatingPos5: smallint('fielding_rating_pos5'),
  fieldingRatingPos6: smallint('fielding_rating_pos6'),
  fieldingRatingPos7: smallint('fielding_rating_pos7'),
  fieldingRatingPos8: smallint('fielding_rating_pos8'),
  fieldingRatingPos9: smallint('fielding_rating_pos9'),
})

export const playersGameBatting = mysqlTable('players_game_batting', {
  playerId: int('player_id'),
  year: smallint(),
  teamId: int('team_id'),
  gameId: int('game_id'),
  leagueId: int('league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  position: smallint(),
  ab: smallint(),
  h: smallint(),
  k: smallint(),
  pa: smallint(),
  pitchesSeen: smallint('pitches_seen'),
  g: smallint(),
  gs: smallint(),
  d: smallint(),
  t: smallint(),
  hr: smallint(),
  r: smallint(),
  rbi: smallint(),
  sb: smallint(),
  cs: smallint(),
  bb: smallint(),
  ibb: smallint(),
  gdp: smallint(),
  sh: smallint(),
  sf: smallint(),
  hp: smallint(),
  ci: smallint(),
  wpa: double(),
  stint: smallint(),
  ubr: double(),
})

export const playersGamePitchingStats = mysqlTable('players_game_pitching_stats', {
  playerId: int('player_id'),
  year: smallint(),
  teamId: int('team_id'),
  gameId: int('game_id'),
  leagueId: int('league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  ip: smallint(),
  ab: smallint(),
  tb: smallint(),
  ha: smallint(),
  k: smallint(),
  bf: smallint(),
  rs: smallint(),
  bb: smallint(),
  r: smallint(),
  er: smallint(),
  gb: smallint(),
  fb: smallint(),
  pi: smallint(),
  ipf: smallint(),
  g: smallint(),
  gs: smallint(),
  w: smallint(),
  l: smallint(),
  s: smallint(),
  sa: smallint(),
  da: smallint(),
  sh: smallint(),
  sf: smallint(),
  ta: smallint(),
  hra: smallint(),
  bk: smallint(),
  ci: smallint(),
  iw: smallint(),
  wp: smallint(),
  hp: smallint(),
  gf: smallint(),
  dp: smallint(),
  qs: smallint(),
  svo: smallint(),
  bs: smallint(),
  ra: smallint(),
  cg: smallint(),
  sho: smallint(),
  sb: smallint(),
  cs: smallint(),
  hld: smallint(),
  ir: double(),
  irs: double(),
  wpa: double(),
  li: double(),
  stint: smallint(),
  outs: smallint(),
  sd: smallint(),
  md: smallint(),
})

export const playersIndividualBattingStats = mysqlTable('players_individual_batting_stats', {
  playerId: int('player_id'),
  opponentId: int('opponent_id'),
  ab: smallint(),
  h: smallint(),
  hr: smallint(),
})

export const playersInjuryHistory = mysqlTable('players_injury_history', {
  playerId: int('player_id'),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  date: date({ mode: 'string' }),
  length: smallint(),
  setbacks: smallint(),
  dayToDay: tinyint('day_to_day'),
  effect: smallint(),
  bodyPart: smallint('body_part'),
})

export const playersLeagueLeader = mysqlTable('players_league_leader', {
  playerId: int('player_id'),
  leagueId: int('league_id'),
  subLeagueId: smallint('sub_league_id'),
  year: smallint(),
  category: smallint(),
  place: smallint(),
  amount: double(),
})

export const playersPitching = mysqlTable('players_pitching', {
  playerId: int('player_id'),
  teamId: int('team_id'),
  leagueId: int('league_id'),
  position: smallint(),
  role: smallint(),
  pitchingRatingsOverallStuff: smallint('pitching_ratings_overall_stuff'),
  pitchingRatingsOverallControl: smallint('pitching_ratings_overall_control'),
  pitchingRatingsOverallMovement: smallint('pitching_ratings_overall_movement'),
  pitchingRatingsOverallBalk: smallint('pitching_ratings_overall_balk'),
  pitchingRatingsOverallHp: smallint('pitching_ratings_overall_hp'),
  pitchingRatingsOverallWildPitch: smallint('pitching_ratings_overall_wild_pitch'),
  pitchingRatingsVsrStuff: smallint('pitching_ratings_vsr_stuff'),
  pitchingRatingsVsrControl: smallint('pitching_ratings_vsr_control'),
  pitchingRatingsVsrMovement: smallint('pitching_ratings_vsr_movement'),
  pitchingRatingsVsrBalk: smallint('pitching_ratings_vsr_balk'),
  pitchingRatingsVsrHp: smallint('pitching_ratings_vsr_hp'),
  pitchingRatingsVsrWildPitch: smallint('pitching_ratings_vsr_wild_pitch'),
  pitchingRatingsVslStuff: smallint('pitching_ratings_vsl_stuff'),
  pitchingRatingsVslControl: smallint('pitching_ratings_vsl_control'),
  pitchingRatingsVslMovement: smallint('pitching_ratings_vsl_movement'),
  pitchingRatingsVslBalk: smallint('pitching_ratings_vsl_balk'),
  pitchingRatingsVslHp: smallint('pitching_ratings_vsl_hp'),
  pitchingRatingsVslWildPitch: smallint('pitching_ratings_vsl_wild_pitch'),
  pitchingRatingsTalentStuff: smallint('pitching_ratings_talent_stuff'),
  pitchingRatingsTalentControl: smallint('pitching_ratings_talent_control'),
  pitchingRatingsTalentMovement: smallint('pitching_ratings_talent_movement'),
  pitchingRatingsTalentBalk: smallint('pitching_ratings_talent_balk'),
  pitchingRatingsTalentHp: smallint('pitching_ratings_talent_hp'),
  pitchingRatingsTalentWildPitch: smallint('pitching_ratings_talent_wild_pitch'),
  pitchingRatingsPitchesFastball: smallint('pitching_ratings_pitches_fastball'),
  pitchingRatingsPitchesSlider: smallint('pitching_ratings_pitches_slider'),
  pitchingRatingsPitchesCurveball: smallint('pitching_ratings_pitches_curveball'),
  pitchingRatingsPitchesScrewball: smallint('pitching_ratings_pitches_screwball'),
  pitchingRatingsPitchesForkball: smallint('pitching_ratings_pitches_forkball'),
  pitchingRatingsPitchesChangeup: smallint('pitching_ratings_pitches_changeup'),
  pitchingRatingsPitchesSinker: smallint('pitching_ratings_pitches_sinker'),
  pitchingRatingsPitchesSplitter: smallint('pitching_ratings_pitches_splitter'),
  pitchingRatingsPitchesKnuckleball: smallint('pitching_ratings_pitches_knuckleball'),
  pitchingRatingsPitchesCutter: smallint('pitching_ratings_pitches_cutter'),
  pitchingRatingsPitchesCirclechange: smallint('pitching_ratings_pitches_circlechange'),
  pitchingRatingsPitchesKnucklecurve: smallint('pitching_ratings_pitches_knucklecurve'),
  pitchingRatingsPitchesTalentFastball: smallint('pitching_ratings_pitches_talent_fastball'),
  pitchingRatingsPitchesTalentSlider: smallint('pitching_ratings_pitches_talent_slider'),
  pitchingRatingsPitchesTalentCurveball: smallint('pitching_ratings_pitches_talent_curveball'),
  pitchingRatingsPitchesTalentScrewball: smallint('pitching_ratings_pitches_talent_screwball'),
  pitchingRatingsPitchesTalentForkball: smallint('pitching_ratings_pitches_talent_forkball'),
  pitchingRatingsPitchesTalentChangeup: smallint('pitching_ratings_pitches_talent_changeup'),
  pitchingRatingsPitchesTalentSinker: smallint('pitching_ratings_pitches_talent_sinker'),
  pitchingRatingsPitchesTalentSplitter: smallint('pitching_ratings_pitches_talent_splitter'),
  pitchingRatingsPitchesTalentKnuckleball: smallint('pitching_ratings_pitches_talent_knuckleball'),
  pitchingRatingsPitchesTalentCutter: smallint('pitching_ratings_pitches_talent_cutter'),
  pitchingRatingsPitchesTalentCirclechange: smallint('pitching_ratings_pitches_talent_circlechange'),
  pitchingRatingsPitchesTalentKnucklecurve: smallint('pitching_ratings_pitches_talent_knucklecurve'),
  pitchingRatingsMiscVelocity: smallint('pitching_ratings_misc_velocity'),
  pitchingRatingsMiscArmSlot: smallint('pitching_ratings_misc_arm_slot'),
  pitchingRatingsMiscStamina: smallint('pitching_ratings_misc_stamina'),
  pitchingRatingsMiscGroundFly: smallint('pitching_ratings_misc_ground_fly'),
  pitchingRatingsMiscHold: smallint('pitching_ratings_misc_hold'),
  pitchingRatingsBabip: smallint('pitching_ratings_babip'),
})

export const playersRosterStatus = mysqlTable('players_roster_status', {
  playerId: int('player_id'),
  teamId: int('team_id'),
  leagueId: int('league_id'),
  position: smallint(),
  role: smallint(),
  playingLevel: smallint('playing_level'),
  isActive: tinyint('is_active'),
  isOnSecondary: tinyint('is_on_secondary'),
  isOnDl: tinyint('is_on_dl'),
  isOnDl60: tinyint('is_on_dl60'),
  mustBeActive: tinyint('must_be_active'),
  justSigned: tinyint('just_signed'),
  wasOnActive: tinyint('was_on_active'),
  wasOnSecondary: tinyint('was_on_secondary'),
  wasOnDl: tinyint('was_on_dl'),
  mlbServiceYears: smallint('mlb_service_years'),
  secondaryServiceYears: smallint('secondary_service_years'),
  proServiceYears: smallint('pro_service_years'),
  mlbServiceDays: smallint('mlb_service_days'),
  secondaryServiceDays: smallint('secondary_service_days'),
  proServiceDays: smallint('pro_service_days'),
  mlbServiceDaysThisYear: smallint('mlb_service_days_this_year'),
  secondaryServiceDaysThisYear: smallint('secondary_service_days_this_year'),
  proServiceDaysThisYear: smallint('pro_service_days_this_year'),
  dlDaysThisYear: smallint('dl_days_this_year'),
  yearsProtectedFromRule5: smallint('years_protected_from_rule_5'),
  isOnWaivers: tinyint('is_on_waivers'),
  designatedForAssignment: tinyint('designated_for_assignment'),
  irrevocableWaivers: tinyint('irrevocable_waivers'),
  daysOnWaivers: smallint('days_on_waivers'),
  daysOnWaiversLeft: smallint('days_on_waivers_left'),
  daysOnDfaLeft: smallint('days_on_dfa_left'),
  claimedTeamId: int('claimed_team_id'),
  optionsUsed: smallint('options_used'),
  optionsUsedThisYear: smallint('options_used_this_year'),
  hasReceivedArbitration: tinyint('has_received_arbitration'),
  wasTraded: tinyint('was_traded'),
  tradeStatus: smallint('trade_status'),
})

export const playersSalaryHistory = mysqlTable('players_salary_history', {
  playerId: int('player_id'),
  teamId: int('team_id'),
  year: smallint(),
  salary: int(),
  uniform: smallint(),
})

export const playersStreak = mysqlTable('players_streak', {
  playerId: int('player_id'),
  leagueId: int('league_id'),
  streakId: smallint('streak_id'),
  value: smallint(),
  hasEnded: tinyint('has_ended'),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  started: date({ mode: 'string' }),
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  ended: date({ mode: 'string' }),
})

export const playersValue = mysqlTable('players_value', {
  playerId: int('player_id'),
  teamId: int('team_id'),
  leagueId: int('league_id'),
  position: smallint(),
  role: smallint(),
  offensiveValue: smallint('offensive_value'),
  offensiveValueTalent: smallint('offensive_value_talent'),
  offensiveValueVsl: smallint('offensive_value_vsl'),
  offensiveValueVsr: smallint('offensive_value_vsr'),
  pitchingValue: smallint('pitching_value'),
  pitchingValueTalent: smallint('pitching_value_talent'),
  pitchingValueVsl: smallint('pitching_value_vsl'),
  pitchingValueVsr: smallint('pitching_value_vsr'),
  overallValue: smallint('overall_value'),
  talentValue: smallint('talent_value'),
  careerValue: smallint('career_value'),
  leadoffValueVsl: smallint('leadoff_value_vsl'),
  leadoffValueVsr: smallint('leadoff_value_vsr'),
  runningValue: smallint('running_value'),
  stealingValue: smallint('stealing_value'),
  seasonPerformance: double('season_performance'),
  statsValue0: smallint('stats_value_0'),
  statsValue1: smallint('stats_value_1'),
  statsValue2: smallint('stats_value_2'),
  statsMod0: smallint('stats_mod_0'),
  statsMod1: smallint('stats_mod_1'),
  statsMod2: smallint('stats_mod_2'),
  ratingsValue: smallint('ratings_value'),
  overallSp: smallint('overall_sp'),
  overallRp: smallint('overall_rp'),
  overallC: smallint('overall_c'),
  overall1B: smallint('overall_1b'),
  overall2B: smallint('overall_2b'),
  overall3B: smallint('overall_3b'),
  overallSs: smallint('overall_ss'),
  overallLf: smallint('overall_lf'),
  overallCf: smallint('overall_cf'),
  overallRf: smallint('overall_rf'),
  awardBat: double('award_bat'),
  awardPit: double('award_pit'),
  awardField: double('award_field'),
  oa: smallint(),
  pot: smallint(),
})

export const projectedStartingPitchers = mysqlTable('projected_starting_pitchers', {
  teamId: int('team_id'),
  starter0: int('starter_0'),
  starter1: int('starter_1'),
  starter2: int('starter_2'),
  starter3: int('starter_3'),
  starter4: int('starter_4'),
  starter5: int('starter_5'),
  starter6: int('starter_6'),
  starter7: int('starter_7'),
})

export const states = mysqlTable('states', {
  stateId: int('state_id').notNull(),
  nationId: int('nation_id').notNull(),
  name: varchar({ length: 50 }),
  abbreviation: varchar({ length: 50 }),
  population: int(),
  mainLanguageId: int('main_language_id'),
})

export const subLeagues = mysqlTable('sub_leagues', {
  leagueId: int('league_id').notNull(),
  subLeagueId: int('sub_league_id').notNull(),
  name: varchar({ length: 50 }),
  abbr: varchar({ length: 50 }),
  gender: int(),
  designatedHitter: tinyint('designated_hitter'),
})

export const teams = mysqlTable('teams', {
  teamId: int('team_id').notNull(),
  name: varchar({ length: 50 }),
  abbr: varchar({ length: 50 }),
  nickname: varchar({ length: 50 }),
  logoFileName: varchar('logo_file_name', { length: 200 }),
  cityId: int('city_id'),
  parkId: int('park_id'),
  leagueId: int('league_id'),
  subLeagueId: int('sub_league_id'),
  divisionId: int('division_id'),
  nationId: int('nation_id'),
  parentTeamId: int('parent_team_id'),
  level: int(),
  preventAnyMoves: tinyint('prevent_any_moves'),
  humanTeam: tinyint('human_team'),
  humanId: int('human_id'),
  gender: int(),
  backgroundColorId: varchar('background_color_id', { length: 8 }),
  textColorId: varchar('text_color_id', { length: 8 }),
  ballcapsMainColorId: varchar('ballcaps_main_color_id', { length: 8 }),
  ballcapsVisorColorId: varchar('ballcaps_visor_color_id', { length: 8 }),
  jerseyMainColorId: varchar('jersey_main_color_id', { length: 8 }),
  jerseyAwayColorId: varchar('jersey_away_color_id', { length: 8 }),
  jerseySecondaryColorId: varchar('jersey_secondary_color_id', { length: 8 }),
  jerseyPinStripesColorId: varchar('jersey_pin_stripes_color_id', { length: 8 }),
  allstarTeam: tinyint('allstar_team'),
  historicalId: varchar('historical_id', { length: 50 }),
})

export const teamAffiliations = mysqlTable('team_affiliations', {
  teamId: int('team_id').notNull(),
  affiliatedTeamId: int('affiliated_team_id').notNull(),
})

export const teamBattingStats = mysqlTable('team_batting_stats', {
  teamId: int('team_id').notNull(),
  year: smallint(),
  leagueId: int('league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  pa: int(),
  ab: int(),
  h: int(),
  k: int(),
  tb: int(),
  s: int(),
  d: int(),
  t: int(),
  hr: int(),
  sb: int(),
  cs: int(),
  rbi: int(),
  r: int(),
  bb: int(),
  ibb: int(),
  hp: int(),
  sh: int(),
  sf: int(),
  ci: int(),
  gdp: int(),
  g: int(),
  gs: int(),
  ebh: int(),
  pitchesSeen: int('pitches_seen'),
  avg: double(),
  obp: double(),
  slg: double(),
  rc: double(),
  rc27: double(),
  iso: double(),
  woba: double(),
  ops: double(),
  sbp: double(),
})

export const teamBullpenPitchingStats = mysqlTable('team_bullpen_pitching_stats', {
  teamId: int('team_id').notNull(),
  year: smallint(),
  leagueId: int('league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  ab: int(),
  ip: int(),
  bf: int(),
  tb: int(),
  ha: int(),
  k: int(),
  rs: int(),
  bb: int(),
  r: int(),
  er: int(),
  gb: int(),
  fb: int(),
  pi: int(),
  ipf: int(),
  g: int(),
  gs: int(),
  w: int(),
  l: int(),
  s: int(),
  sa: int(),
  da: int(),
  sh: int(),
  sf: int(),
  ta: int(),
  hra: int(),
  bk: int(),
  ci: int(),
  iw: int(),
  wp: int(),
  hp: int(),
  gf: int(),
  dp: int(),
  qs: int(),
  svo: int(),
  bs: int(),
  ra: int(),
  cg: int(),
  sho: int(),
  sb: int(),
  cs: int(),
  hld: int(),
  r9: double(),
  avg: double(),
  obp: double(),
  slg: double(),
  ops: double(),
  h9: double(),
  k9: double(),
  hr9: double(),
  bb9: double(),
  cgp: double(),
  fip: double(),
  qsp: double(),
  winp: double(),
  rsg: double(),
  svp: double(),
  bsvp: double(),
  gfp: double(),
  era: double(),
  pig: double(),
  ws: double(),
  whip: double(),
  gbfbp: double(),
  kbb: double(),
  babip: double(),
})

export const teamFieldingStatsStats = mysqlTable('team_fielding_stats_stats', {
  teamId: int('team_id').notNull(),
  year: smallint(),
  leagueId: int('league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  position: smallint(),
  g: int(),
  gs: int(),
  tc: int(),
  a: int(),
  po: int(),
  e: int(),
  dp: int(),
  tp: int(),
  pb: int(),
  sba: int(),
  rto: int(),
  er: int(),
  ip: int(),
  ipf: int(),
  pct: double(),
  range: double(),
  rtop: double(),
  cera: double(),
})

export const teamFinancials = mysqlTable('team_financials', {
  teamId: int('team_id').notNull(),
  gateRevenue: int('gate_revenue'),
  gateShareGained: int('gate_share_gained'),
  gateShareLost: int('gate_share_lost'),
  seasonTicketRevenue: int('season_ticket_revenue'),
  mediaRevenue: int('media_revenue'),
  merchandisingRevenue: int('merchandising_revenue'),
  revenueSharing: int('revenue_sharing'),
  luxurySharing: int('luxury_sharing'),
  playoffRevenue: int('playoff_revenue'),
  cash: int(),
  cashOwner: int('cash_owner'),
  cashTrades: int('cash_trades'),
  previousBalance: int('previous_balance'),
  playerExpenses: int('player_expenses'),
  staffExpenses: int('staff_expenses'),
  stadiumExpenses: int('stadium_expenses'),
  seasonTickets: int('season_tickets'),
  attendance: int(),
  fanInterest: smallint('fan_interest'),
  fanLoyalty: smallint('fan_loyalty'),
  fanModifier: smallint('fan_modifier'),
  ticketPrice: double('ticket_price'),
  localMediaContract: int('local_media_contract'),
  localMediaContractExpires: int('local_media_contract_expires'),
  nationalMediaContract: int('national_media_contract'),
  nationalMediaContractExpires: int('national_media_contract_expires'),
  scoutingBudget: int('scouting_budget'),
  developmentBudget: int('development_budget'),
  draftBudget: int('draft_budget'),
  draftExpenses: int('draft_expenses'),
  intlFaBudget: int('intl_fa_budget'),
  spentInIntl: int('spent_in_intl'),
  budget: int(),
  market: smallint(),
  ownerExpectation: smallint('owner_expectation'),
  totalRevenue: int('total_revenue'),
  totalExpenses: int('total_expenses'),
  financialBalance: int('financial_balance'),
  budgetBalance: int('budget_balance'),
  playerPayroll: int('player_payroll'),
  playerPayrollNextSeason: int('player_payroll_next_season'),
  playerPayrollOffered: int('player_payroll_offered'),
  mode: smallint(),
  cashTradesAvailable: int('cash_trades_available'),
})

export const teamHistory = mysqlTable('team_history', {
  teamId: int('team_id').notNull(),
  year: smallint().notNull(),
  leagueId: int('league_id'),
  subLeagueId: smallint('sub_league_id'),
  divisionId: smallint('division_id'),
  name: varchar({ length: 50 }),
  abbr: varchar({ length: 50 }),
  nickname: varchar({ length: 50 }),
  bestHitterId: int('best_hitter_id'),
  bestPitcherId: int('best_pitcher_id'),
  bestRookieId: int('best_rookie_id'),
  managerId: int('manager_id'),
  madePlayoffs: tinyint('made_playoffs'),
  wonPlayoffs: tinyint('won_playoffs'),
  fired: tinyint(),
  positionInDivision: smallint('position_in_division'),
})

export const teamHistoryBattingStats = mysqlTable('team_history_batting_stats', {
  teamId: int('team_id').notNull(),
  year: smallint().notNull(),
  leagueId: int('league_id'),
  subLeagueId: smallint('sub_league_id'),
  divisionId: smallint('division_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  pa: int(),
  ab: int(),
  h: int(),
  k: int(),
  tb: int(),
  s: int(),
  d: int(),
  t: int(),
  hr: int(),
  sb: int(),
  cs: int(),
  rbi: int(),
  r: int(),
  bb: int(),
  ibb: int(),
  hp: int(),
  sh: int(),
  sf: int(),
  ci: int(),
  gdp: int(),
  g: int(),
  gs: int(),
  ebh: int(),
  pitchesSeen: int('pitches_seen'),
  avg: double(),
  obp: double(),
  slg: double(),
  rc: double(),
  rc27: double(),
  iso: double(),
  woba: double(),
  ops: double(),
  sbp: double(),
})

export const teamHistoryFieldingStatsStats = mysqlTable('team_history_fielding_stats_stats', {
  teamId: int('team_id').notNull(),
  year: smallint().notNull(),
  leagueId: int('league_id'),
  subLeagueId: smallint('sub_league_id'),
  divisionId: smallint('division_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  position: smallint(),
  g: int(),
  gs: int(),
  tc: int(),
  a: int(),
  po: int(),
  e: int(),
  dp: int(),
  tp: int(),
  pb: int(),
  sba: int(),
  rto: int(),
  er: int(),
  ip: int(),
  ipf: int(),
  pct: double(),
  range: double(),
  rtop: double(),
  cera: double(),
})

export const teamHistoryFinancials = mysqlTable('team_history_financials', {
  teamId: int('team_id').notNull(),
  year: smallint().notNull(),
  leagueId: int('league_id'),
  subLeagueId: smallint('sub_league_id'),
  divisionId: smallint('division_id'),
  gateRevenue: int('gate_revenue'),
  gateShareGained: int('gate_share_gained'),
  gateShareLost: int('gate_share_lost'),
  seasonTicketRevenue: int('season_ticket_revenue'),
  mediaRevenue: int('media_revenue'),
  merchandisingRevenue: int('merchandising_revenue'),
  revenueSharing: int('revenue_sharing'),
  luxurySharing: int('luxury_sharing'),
  playoffRevenue: int('playoff_revenue'),
  cash: int(),
  cashOwner: int('cash_owner'),
  cashTrades: int('cash_trades'),
  previousBalance: int('previous_balance'),
  playerExpenses: int('player_expenses'),
  staffExpenses: int('staff_expenses'),
  stadiumExpenses: int('stadium_expenses'),
  seasonTickets: int('season_tickets'),
  attendance: int(),
  fanInterest: smallint('fan_interest'),
  fanLoyalty: smallint('fan_loyalty'),
  fanModifier: smallint('fan_modifier'),
  ticketPrice: double('ticket_price'),
  localMediaContract: int('local_media_contract'),
  localMediaContractExpires: int('local_media_contract_expires'),
  nationalMediaContract: int('national_media_contract'),
  nationalMediaContractExpires: int('national_media_contract_expires'),
  scoutingBudget: int('scouting_budget'),
  developmentBudget: int('development_budget'),
  draftBudget: int('draft_budget'),
  draftExpenses: int('draft_expenses'),
  intlFaBudget: int('intl_fa_budget'),
  spentInIntl: int('spent_in_intl'),
  budget: int(),
  market: smallint(),
  ownerExpectation: smallint('owner_expectation'),
  totalRevenue: int('total_revenue'),
  totalExpenses: int('total_expenses'),
  financialBalance: int('financial_balance'),
  budgetBalance: int('budget_balance'),
})

export const teamHistoryPitchingStats = mysqlTable('team_history_pitching_stats', {
  teamId: int('team_id').notNull(),
  year: smallint().notNull(),
  leagueId: int('league_id'),
  subLeagueId: smallint('sub_league_id'),
  divisionId: smallint('division_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  ab: int(),
  ip: int(),
  bf: int(),
  tb: int(),
  ha: int(),
  k: int(),
  rs: int(),
  bb: int(),
  r: int(),
  er: int(),
  gb: int(),
  fb: int(),
  pi: int(),
  ipf: int(),
  g: int(),
  gs: int(),
  w: int(),
  l: int(),
  s: int(),
  sa: int(),
  da: int(),
  sh: int(),
  sf: int(),
  ta: int(),
  hra: int(),
  bk: int(),
  ci: int(),
  iw: int(),
  wp: int(),
  hp: int(),
  gf: int(),
  dp: int(),
  qs: int(),
  svo: int(),
  bs: int(),
  ra: int(),
  cg: int(),
  sho: int(),
  sb: int(),
  cs: int(),
  hld: int(),
  r9: double(),
  avg: double(),
  obp: double(),
  slg: double(),
  ops: double(),
  h9: double(),
  k9: double(),
  hr9: double(),
  bb9: double(),
  cgp: double(),
  fip: double(),
  qsp: double(),
  winp: double(),
  rsg: double(),
  svp: double(),
  bsvp: double(),
  gfp: double(),
  era: double(),
  pig: double(),
  ws: double(),
  whip: double(),
  gbfbp: double(),
  kbb: double(),
  babip: double(),
})

export const teamHistoryRecord = mysqlTable('team_history_record', {
  teamId: int('team_id').notNull(),
  year: smallint().notNull(),
  leagueId: int('league_id'),
  subLeagueId: smallint('sub_league_id'),
  divisionId: smallint('division_id'),
  g: smallint(),
  w: smallint(),
  l: smallint(),
  t: smallint(),
  pos: smallint(),
  pct: double(),
  gb: double(),
  streak: smallint(),
  magicNumber: smallint('magic_number'),
})

export const teamLastFinancials = mysqlTable('team_last_financials', {
  teamId: int('team_id').notNull(),
  gateRevenue: int('gate_revenue'),
  gateShareGained: int('gate_share_gained'),
  gateShareLost: int('gate_share_lost'),
  seasonTicketRevenue: int('season_ticket_revenue'),
  mediaRevenue: int('media_revenue'),
  merchandisingRevenue: int('merchandising_revenue'),
  revenueSharing: int('revenue_sharing'),
  luxurySharing: int('luxury_sharing'),
  playoffRevenue: int('playoff_revenue'),
  cash: int(),
  cashOwner: int('cash_owner'),
  cashTrades: int('cash_trades'),
  previousBalance: int('previous_balance'),
  playerExpenses: int('player_expenses'),
  staffExpenses: int('staff_expenses'),
  stadiumExpenses: int('stadium_expenses'),
  seasonTickets: int('season_tickets'),
  attendance: int(),
  fanInterest: smallint('fan_interest'),
  fanLoyalty: smallint('fan_loyalty'),
  fanModifier: smallint('fan_modifier'),
  ticketPrice: double('ticket_price'),
  localMediaContract: int('local_media_contract'),
  localMediaContractExpires: int('local_media_contract_expires'),
  nationalMediaContract: int('national_media_contract'),
  nationalMediaContractExpires: int('national_media_contract_expires'),
  scoutingBudget: int('scouting_budget'),
  developmentBudget: int('development_budget'),
  draftBudget: int('draft_budget'),
  draftExpenses: int('draft_expenses'),
  intlFaBudget: int('intl_fa_budget'),
  spentInIntl: int('spent_in_intl'),
  budget: int(),
  market: smallint(),
  ownerExpectation: smallint('owner_expectation'),
  totalRevenue: int('total_revenue'),
  totalExpenses: int('total_expenses'),
  financialBalance: int('financial_balance'),
  budgetBalance: int('budget_balance'),
})

export const teamPitchingStats = mysqlTable('team_pitching_stats', {
  teamId: int('team_id').notNull(),
  year: smallint(),
  leagueId: int('league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  ab: int(),
  ip: int(),
  bf: int(),
  tb: int(),
  ha: int(),
  k: int(),
  rs: int(),
  bb: int(),
  r: int(),
  er: int(),
  gb: int(),
  fb: int(),
  pi: int(),
  ipf: int(),
  g: int(),
  gs: int(),
  w: int(),
  l: int(),
  s: int(),
  sa: int(),
  da: int(),
  sh: int(),
  sf: int(),
  ta: int(),
  hra: int(),
  bk: int(),
  ci: int(),
  iw: int(),
  wp: int(),
  hp: int(),
  gf: int(),
  dp: int(),
  qs: int(),
  svo: int(),
  bs: int(),
  ra: int(),
  cg: int(),
  sho: int(),
  sb: int(),
  cs: int(),
  hld: int(),
  r9: double(),
  avg: double(),
  obp: double(),
  slg: double(),
  ops: double(),
  h9: double(),
  k9: double(),
  hr9: double(),
  bb9: double(),
  cgp: double(),
  fip: double(),
  qsp: double(),
  winp: double(),
  rsg: double(),
  svp: double(),
  bsvp: double(),
  gfp: double(),
  era: double(),
  pig: double(),
  ws: double(),
  whip: double(),
  gbfbp: double(),
  kbb: double(),
  babip: double(),
})

export const teamRecord = mysqlTable('team_record', {
  teamId: int('team_id').notNull(),
  g: smallint(),
  w: smallint(),
  l: smallint(),
  t: smallint(),
  pos: smallint(),
  pct: double(),
  gb: double(),
  streak: smallint(),
  magicNumber: smallint('magic_number'),
})

export const teamRelations = mysqlTable('team_relations', {
  leagueId: int('league_id').notNull(),
  subLeagueId: int('sub_league_id').notNull(),
  divisionId: int('division_id').notNull(),
  teamId: int('team_id').notNull(),
})

export const teamRoster = mysqlTable('team_roster', {
  teamId: int('team_id').notNull(),
  playerId: int('player_id').notNull(),
  listId: smallint('list_id').notNull(),
})

export const teamRosterStaff = mysqlTable('team_roster_staff', {
  teamId: int('team_id').notNull(),
  headScout: int('head_scout'),
  manager: int(),
  generalManager: int('general_manager'),
  pitchingCoach: int('pitching_coach'),
  hittingCoach: int('hitting_coach'),
  benchCoach: int('bench_coach'),
  owner: int(),
  doctor: int(),
  firstBaseCoach: int('first_base_coach'),
  thirdBaseCoach: int('third_base_coach'),
})

export const teamStartingPitchingStats = mysqlTable('team_starting_pitching_stats', {
  teamId: int('team_id').notNull(),
  year: smallint(),
  leagueId: int('league_id'),
  levelId: smallint('level_id'),
  splitId: smallint('split_id'),
  ab: int(),
  ip: int(),
  bf: int(),
  tb: int(),
  ha: int(),
  k: int(),
  rs: int(),
  bb: int(),
  r: int(),
  er: int(),
  gb: int(),
  fb: int(),
  pi: int(),
  ipf: int(),
  g: int(),
  gs: int(),
  w: int(),
  l: int(),
  s: int(),
  sa: int(),
  da: int(),
  sh: int(),
  sf: int(),
  ta: int(),
  hra: int(),
  bk: int(),
  ci: int(),
  iw: int(),
  wp: int(),
  hp: int(),
  gf: int(),
  dp: int(),
  qs: int(),
  svo: int(),
  bs: int(),
  ra: int(),
  cg: int(),
  sho: int(),
  sb: int(),
  cs: int(),
  hld: int(),
  r9: double(),
  avg: double(),
  obp: double(),
  slg: double(),
  ops: double(),
  h9: double(),
  k9: double(),
  hr9: double(),
  bb9: double(),
  cgp: double(),
  fip: double(),
  qsp: double(),
  winp: double(),
  rsg: double(),
  svp: double(),
  bsvp: double(),
  gfp: double(),
  era: double(),
  pig: double(),
  ws: double(),
  whip: double(),
  gbfbp: double(),
  kbb: double(),
  babip: double(),
})

export const tradeHistory = mysqlTable('trade_history', {
  // you can use { mode: 'date' }, if you want to have Date as type for this column
  date: date({ mode: 'string' }),
  summary: varchar({ length: 255 }),
  messageId: int('message_id'),
  teamId0: int('team_id_0'),
  playerId00: int('player_id_0_0'),
  playerId01: int('player_id_0_1'),
  playerId02: int('player_id_0_2'),
  playerId03: int('player_id_0_3'),
  playerId04: int('player_id_0_4'),
  playerId05: int('player_id_0_5'),
  playerId06: int('player_id_0_6'),
  playerId07: int('player_id_0_7'),
  playerId08: int('player_id_0_8'),
  playerId09: int('player_id_0_9'),
  draftRound00: smallint('draft_round_0_0'),
  draftTeam00: int('draft_team_0_0'),
  draftRound01: smallint('draft_round_0_1'),
  draftTeam01: int('draft_team_0_1'),
  draftRound02: smallint('draft_round_0_2'),
  draftTeam02: int('draft_team_0_2'),
  draftRound03: smallint('draft_round_0_3'),
  draftTeam03: int('draft_team_0_3'),
  draftRound04: smallint('draft_round_0_4'),
  draftTeam04: int('draft_team_0_4'),
  cash0: int('cash_0'),
  iafaCap0: int('iafa_cap_0'),
  teamId1: int('team_id_1'),
  playerId10: int('player_id_1_0'),
  playerId11: int('player_id_1_1'),
  playerId12: int('player_id_1_2'),
  playerId13: int('player_id_1_3'),
  playerId14: int('player_id_1_4'),
  playerId15: int('player_id_1_5'),
  playerId16: int('player_id_1_6'),
  playerId17: int('player_id_1_7'),
  playerId18: int('player_id_1_8'),
  playerId19: int('player_id_1_9'),
  draftRound10: smallint('draft_round_1_0'),
  draftTeam10: int('draft_team_1_0'),
  draftRound11: smallint('draft_round_1_1'),
  draftTeam11: int('draft_team_1_1'),
  draftRound12: smallint('draft_round_1_2'),
  draftTeam12: int('draft_team_1_2'),
  draftRound13: smallint('draft_round_1_3'),
  draftTeam13: int('draft_team_1_3'),
  draftRound14: smallint('draft_round_1_4'),
  draftTeam14: int('draft_team_1_4'),
  cash1: int('cash_1'),
  iafaCap1: int('iafa_cap_1'),
})
export const battingRatingsNormalized = mysqlView('batting_ratings_normalized', {
  overallContact: decimal('overall_contact', { precision: 11, scale: 0 }),
  overallGap: decimal('overall_gap', { precision: 11, scale: 0 }),
  overallEye: decimal('overall_eye', { precision: 11, scale: 0 }),
  overallStrikeouts: decimal('overall_strikeouts', { precision: 11, scale: 0 }),
  overallPower: decimal('overall_power', { precision: 11, scale: 0 }),
  overallBabip: decimal('overall_babip', { precision: 11, scale: 0 }),
  vsrContact: decimal('vsr_contact', { precision: 11, scale: 0 }),
  vsrGap: decimal('vsr_gap', { precision: 11, scale: 0 }),
  vsrEye: decimal('vsr_eye', { precision: 11, scale: 0 }),
  vsrStrikeouts: decimal('vsr_strikeouts', { precision: 11, scale: 0 }),
  vsrPower: decimal('vsr_power', { precision: 11, scale: 0 }),
  vslContact: decimal('vsl_contact', { precision: 11, scale: 0 }),
  vslGap: decimal('vsl_gap', { precision: 11, scale: 0 }),
  vslEye: decimal('vsl_eye', { precision: 11, scale: 0 }),
  vslStrikeouts: decimal('vsl_strikeouts', { precision: 11, scale: 0 }),
  vslPower: decimal('vsl_power', { precision: 11, scale: 0 }),
  potentialContact: decimal('potential_contact', { precision: 11, scale: 0 }),
  potentialÏGap: decimal('potentialÏ_gap', { precision: 11, scale: 0 }),
  potentialEye: decimal('potential_eye', { precision: 11, scale: 0 }),
  potentialStrikeouts: decimal('potential_strikeouts', { precision: 11, scale: 0 }),
  potentialPower: decimal('potential_power', { precision: 11, scale: 0 }),
}).algorithm('undefined').sqlSecurity('definer').as(sql`select 5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_overall_contact\` / (50 / 3),0) + 20 AS \`overall_contact\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_overall_gap\` / (50 / 3),0) + 20 AS \`overall_gap\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_overall_eye\` / (50 / 3),0) + 20 AS \`overall_eye\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_overall_strikeouts\` / (50 / 3),0) + 20 AS \`overall_strikeouts\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_overall_power\` / (50 / 3),0) + 20 AS \`overall_power\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_overall_babip\` / (50 / 3),0) + 20 AS \`overall_babip\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_vsr_contact\` / (50 / 3),0) + 20 AS \`vsr_contact\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_vsr_gap\` / (50 / 3),0) + 20 AS \`vsr_gap\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_vsr_eye\` / (50 / 3),0) + 20 AS \`vsr_eye\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_vsr_strikeouts\` / (50 / 3),0) + 20 AS \`vsr_strikeouts\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_vsr_power\` / (50 / 3),0) + 20 AS \`vsr_power\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_vsl_contact\` / (50 / 3),0) + 20 AS \`vsl_contact\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_vsl_gap\` / (50 / 3),0) + 20 AS \`vsl_gap\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_vsl_eye\` / (50 / 3),0) + 20 AS \`vsl_eye\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_vsl_strikeouts\` / (50 / 3),0) + 20 AS \`vsl_strikeouts\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_vsl_power\` / (50 / 3),0) + 20 AS \`vsl_power\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_talent_contact\` / (50 / 3),0) + 20 AS \`potential_contact\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_talent_gap\` / (50 / 3),0) + 20 AS \`potentialÏ_gap\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_talent_eye\` / (50 / 3),0) + 20 AS \`potential_eye\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_talent_strikeouts\` / (50 / 3),0) + 20 AS \`potential_strikeouts\`,5 * truncate(\`naba\`.\`players_batting\`.\`batting_ratings_talent_power\` / (50 / 3),0) + 20 AS \`potential_power\` from \`naba\`.\`players_batting\``)

// RELATIONS
export const playersRelations = relations(players, ({ many }) => ({
  careerPitchingStats: many(playersCareerPitchingStats),
}))
export const playersCareerPitchingStatsRelations = relations(playersCareerPitchingStats, ({ one }) => ({
  player: one(players, { fields: [playersCareerPitchingStats.playerId], references: [players.playerId] }),
}))
